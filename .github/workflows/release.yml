name: release

permissions:
  contents: write

on:
  push:
    tags:
      - "[0-9]+.*"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  release:
    runs-on: ${{ matrix.os }}
    name: release (${{ matrix.os }}${{ matrix.ffmpeg && ' ffmpeg' || '' }})

    strategy:
      matrix:
        include:
          # - os: macos-latest
          #   ffmpeg: true
          # - os: macos-latest
          #   ffmpeg: false
          - os: windows-latest
            ffmpeg: true
          # - os: windows-latest
          #   ffmpeg: false

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' && 'x86_64-apple-darwin' || '' }}

      # - name: Bundle (macOS)
      #   if: matrix.os == 'macos-latest' && !matrix.ffmpeg
      #   run: |
      #     npm i pnpm -g
      #     pnpm i
      #     node --run build:ui
      #     node --run build:tauri:mac

      # - name: Bundle with ffmpeg (macOS)
      #   if: matrix.os == 'macos-latest' && matrix.ffmpeg
      #   env:
      #     GITHUB_REF_NAME: ${{ github.ref_name }}
      #   run: |
      #     curl -L -o ffmpeg.zip "https://evermeet.cx/ffmpeg/getrelease/zip"
      #     unzip ffmpeg.zip -d ./tauri/ffmpeg
      #     chmod +x ./tauri/ffmpeg/ffmpeg
      #     ./tauri/ffmpeg/ffmpeg -version
      #     curl -L -o ffprobe.zip "https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip"
      #     unzip ffprobe.zip -d ./tauri/ffmpeg
      #     chmod +x ./tauri/ffmpeg/ffprobe
      #     ./tauri/ffmpeg/ffprobe -version
      #     npm i pnpm -g
      #     pnpm i
      #     node --run build:ui
      #     node --run build:tauri:mac
      #     mv ./target/universal-apple-darwin/release/bundle/dmg/CzkawkaTauri_${GITHUB_REF_NAME}_universal.dmg ./target/universal-apple-darwin/release/bundle/dmg/CzkawkaTauri_${GITHUB_REF_NAME}_universal_ffmpeg.dmg

      # - name: Bundle (Windows)
      #   if: matrix.os == 'windows-latest' && !matrix.ffmpeg
      #   run: |
      #     npm i pnpm -g
      #     pnpm i
      #     node --run build:ui
      #     node --run build:tauri:win

      - name: Bundle with ffmpeg (Windows)
        if: matrix.os == 'windows-latest' && matrix.ffmpeg
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          curl -L -o ffmpeg.zip "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          tar -xf ffmpeg.zip -C ./tauri/ffmpeg --strip-components=1
          Move-Item ./tauri/ffmpeg/bin/ffmpeg.exe ./tauri/ffmpeg/ffmpeg.exe
          Move-Item ./tauri/ffmpeg/bin/ffprobe.exe ./tauri/ffmpeg/ffprobe.exe
          ./tauri/ffmpeg/ffmpeg.exe -version
          ./tauri/ffmpeg/ffprobe.exe -version
          npm i pnpm -g
          pnpm i
          node --run build:ui
          node --run build:tauri:win
          echo "${GITHUB_REF_NAME}"
          echo "$env:GITHUB_REF_NAME"
          Move-Item ./target/release/bundle/nsis/CzkawkaTauri_${GITHUB_REF_NAME}_x64-setup.exe ./target/release/bundle/nsis/CzkawkaTauri_${GITHUB_REF_NAME}_x64-setup-ffmpeg.exe

      # - uses: softprops/action-gh-release@v2
      #   if: matrix.os == 'macos-latest'
      #   with:
      #     draft: true
      #     files: |
      #       ./target/universal-apple-darwin/release/bundle/dmg/*.dmg

      # - uses: softprops/action-gh-release@v2
      #   if: matrix.os == 'windows-latest'
      #   with:
      #     draft: true
      #     files: |
      #       ./target/release/bundle/nsis/*.exe
